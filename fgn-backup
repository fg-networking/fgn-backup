#!/bin/sh

#Filesystem           1K-blocks      Used Available Use% Mounted on
#/dev/sda1              1008872    128756    828868  14% /
#tmpfs                    20480         0     20480   0% /dev/shm
#/dev/sda5              5110752    376632   4734120   8% /usr
#/dev/sda6              5110752   3803008   1307744  75% 
#/dev/sda7            230768484  41390708 189377776  18% /var
#none                   1815832     47056   1768776   3% /tmp

BACKUPLIST="/ /usr /var"
BACKUPCACHEDIR="/home/jmayer/NOBACKUP"
BACKUPDIR="/var/lib/backup"
DB_BACKUP_PATH="/home/jmayer/BACKUP"
BACKUPLOG="${BACKUPDIR}/backup.txt"
PARTITIONLOG="${BACKUPDIR}/partitiontable.log"
FTP_SERVER="backup189.rootmaster.info"
FTP_USER="ftpuser"
FTP_PASS="ftppassword"
TOTAL_FTP_SPACE=250000

TARFLAGS=" --create --one-file-system --gzip --exclude=NOBACKUP --exclude-from=./tar-exclude --file "
DUMPFLAGS=" --opt --add-drop-table --quote-names "
#
# Datum ermitteln
DATE1=`date +%F`
TIME1=`date +%T`
# use date only (no time information) for directory name on ftp server
TIMESTAMP=`date +%F | tr -d '-'`

# true: create backup data and save to ftp server
# false: only save files
if [ 1 = 1 ]; then

umask 077

echo "#######################################" | tee "${BACKUPLOG}"
echo "#_______ FTP Backup Nachricht ________#" | tee -a "${BACKUPLOG}"
echo "#-------------------------------------#" | tee -a "${BACKUPLOG}"
echo "#~Datum:~$DATE1~~Zeit:~$TIME1~~ #" | tee -a "${BACKUPLOG}"
echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #" | tee -a "${BACKUPLOG}"
echo "#---------------Backuplog-------------#" | tee -a "${BACKUPLOG}"
echo "#____________________________________ #" | tee -a "${BACKUPLOG}"
echo "#######################################" | tee -a "${BACKUPLOG}"

echo "========= fdisk -l =========" | tee "${PARTITIONLOG}"
fdisk -l | tee -a "${PARTITIONLOG}"
echo "========= df ===============" | tee -a "${PARTITIONLOG}"
df | tee -a "${PARTITIONLOG}"
echo "========= fstab ==============="|tee -a "${PARTITIONLOG}"
cat /etc/fstab | tee -a "${PARTITIONLOG}"

dpkg --get-selections "*" > ${BACKUPDIR}/dpkg-selections.log

prebackup()
{
    rm $DB_BACKUP_PATH/mysqldump_*.gz
    mkdir -pv $DB_BACKUP_PATH
    for i in $(mysql --defaults-file=/etc/mysql/debian.cnf -N --batch -e 'SHOW DATABASES;') ; do
	echo -n "DB: $i "
        mysqldump --defaults-file=/etc/mysql/debian.cnf $DUMPFLAGS --databases "$i" | gzip -c > "$DB_BACKUP_PATH/mysqldump_db_${i}.gz"
	date
    done

    echo -n "DB all "
    mysqldump --defaults-file=/etc/mysql/debian.cnf $DUMPFLAGS --all-databases | gzip -c > "$DB_BACKUP_PATH/mysqldump_all.gz"
}

date
prebackup | tee -a "${BACKUPLOG}"
date
rm -rf ${BACKUPCACHEDIR}/*.tar.gz
mkdir -pv ${BACKUPCACHEDIR}
for partition in $BACKUPLIST; do

    echo
    echo Partition $partition:
    echo

    if [ ! -d $partition ]; then
	echo
        echo    "  WARNING: Backuplist not up to date - target: $partition"
	echo    "           doesn't exist or isn't a directory: "
	echo -n "           "
	ls -ld $partition
	echo
	continue
    fi

    cd $partition
    if [ ! -f tar-exclude ]; then
	touch tar-exclude
    fi

    partfile=`echo -n bak${partition}.tar.gz | tr '/' '_'`
    fullpartfile=${BACKUPCACHEDIR}/${partfile}

    echo -n "TAR: $fullpartfile "
    tar $TARFLAGS $fullpartfile .
    date
done

# only save files
fi

cd ${BACKUPCACHEDIR}
FTPDIR=${TIMESTAMP}
# don't use "prompt" when already using -i
echo -n "Starting FTP transfer: "
date
ftp -inv <<BACKUPENDE 2>&1 | tee -a "${BACKUPLOG}"
    open ${FTP_SERVER}
    user ${FTP_USER} ${FTP_PASS}
    bin
    mkdir ${FTPDIR}
    cd ${FTPDIR}
    mput *
BACKUPENDE

echo -n "Finished FTP transfer: "
date

# check free space on FTP server
USED_FTP_SPACE=$(echo du -sm . | lftp -u "${FTP_USER},${FTP_PASS}" "$FTP_SERVER" | cut -f1)
NEEDED_FTP_SPACE=$(du -sm $BACKUPCACHEDIR | cut -f1)
FREE_FTP_SPACE=$(($TOTAL_FTP_SPACE - $USED_FTP_SPACE))
echo "Used space on FTP server (in MB): $USED_FTP_SPACE"
echo "Free space on FTP server (in MB): $FREE_FTP_SPACE"
echo "Current size of backup   (in MB): $NEEDED_FTP_SPACE"
if [ $NEEDED_FTP_SPACE -ge $FREE_FTP_SPACE ]; then
    echo -e "\nWARNING: not enough space left on FTP server for next backup"
else
    echo "There is space for $(($FREE_FTP_SPACE / $NEEDED_FTP_SPACE))" \
         "backup(s) left."
fi

exit 0
