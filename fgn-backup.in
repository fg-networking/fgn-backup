#!/bin/sh
# version @@VERSION@@
#   Copyright (C) 2007-2011 Erik Auerswald <auerswald@fg-networking.de>
#   Copyright (C) 2006-2008,2011 JÃ¶rg Mayer <jmayer@fg-networking.de>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

# unset variables are a script error
set -u

# read configuration
. @@LIBDIR@@/fgn-backup.global.conf
. /etc/fgn-backup.conf

# include function-modules
. ${MODULEPATH}/modules

# show help and exit if run in interactive session w/o specifying any options
test $# -eq 0 -a \( -t 0 -o -t 1 \) &&
    { usage; \
      echo "Notice: Started in interactive session without any options, doing nothing."; \
      exit 1; }

# parse commandline
while getopts "VhiImMSstTfFcC" option; do
    case $option in
        V)      show_version; exit 0;;
        h)      usage; exit 0;;
        i)      DO_INIT_LOGS=1;;
        I)      DO_INIT_LOGS=0;;
        m)      DO_MYSQL=1;;
        M)      DO_MYSQL=0;;
        s)      DO_OPENLDAP=1;;
        S)      DO_OPENLDAP=0;;
        t)      DO_TAR=1;;
        T)      DO_TAR=0;;
        f)      DO_FTP=1;;
        F)      DO_FTP=0;;
        c)      DO_CHECK_FTP=1;;
        C)      DO_CHECK_FTP=0;;
        \?)     echo "Error: unknown option given"; usage; exit 1;;
        *)      echo "Error: getopts error: getopts returned $option";;
    esac
done
shift $(($OPTIND - 1))
test $# -eq 0 || \
    { echo "Error: non-option command line argument(s) given"; usage; exit 1; }

# assure that there is only one instance of fgn-backup running
mkdir -p "$BACKUPRUNDIR"
test -e "${BACKUPRUNDIR}/fgn-backup.pid" && \
  { printf "fgn-backup already running (PID %s), exiting\n" \
    $(cat "${BACKUPRUNDIR}/fgn-backup.pid"); exit 1; }
echo $$ > "${BACKUPRUNDIR}/fgn-backup.pid"

# create backup logs
test $DO_INIT_LOGS -eq 1 && init_logfiles
# dump databases
test $DO_MYSQL -eq 1 && dump_mysql_dbs 2>&1 | tee -a "${BACKUPLOG}"
test $DO_OPENLDAP -eq 1 && dump_openldap 2>&1 | tee -a "${BACKUPLOG}"
# create archives
test $DO_TAR -eq 1 && tar_partitions 2>&1 | tee -a "${BACKUPLOG}"
# check free space on server (so we have an immediate idea why an upload failed)
test $DO_FTP -eq 1 && check_free_ftp_space 2>&1 | tee -a "${BACKUPLOG}"
# upload to server
test $DO_FTP -eq 1 && ftp_upload 2>&1 | tee -a "${BACKUPLOG}"
# check free space on server
test $DO_CHECK_FTP -eq 1 && check_free_ftp_space 2>&1 | tee -a "${BACKUPLOG}"

rm -f "${BACKUPRUNDIR}/fgn-backup.pid"
exit 0

# vim:filetype=sh:shiftwidth=4:expandtab:
